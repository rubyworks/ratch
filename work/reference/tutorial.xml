<?xml version="1.0" encoding="ISO-8859-1" ?>
<?xml-stylesheet href="layout.xsl" type="text/xsl" ?>

<content>

<h1 class="top">Ratch Tutorial <span class="rev">rev. 9</span></h1>

<p class="important">
  <b>IMPORTANT!</b> -- THIS DOCUMENT IS CURRENLTY OUT-OF-DATE!
</p>


<p><img src="img/ratch.jpg" alt="" /></p>


<h1>Introduction</h1>


<p>Ratch is a Ruby-based batch file system specially designed for handling
project support and build tasks.</p>


<p>The creation of support and build tools for a project entails the
question of whether to simply use shell scripts or rely on a specialized
build system. The later is almost always the prefered choice. Why?
Two reasons in particular stand out. First, and perhaps most importantly,
shell scripts are generally not cross-platform. A shell script on a Linux
machine may well fail on a Mac X system, and will certainly fail on a Windows
system. Second, shell scripting lacks dedicated support for the creation of
build tasks. This is the reason we have tools like Make&#8212;a build tool built
on top of the Unix shell commands.</p>


<p>Ratch solves these two issues by providing a cross-platform shell scripting
<span class="caps">DSL</span> based on Ruby. Ratch scripts are really just Ruby scripts. What sets them
apart from plain Ruby is the convenient Domain Specific Language (DSL) that
Ratch provides geared specifically toward the needs of project task and
build task scripting. With Ratch, scripting becomes a viable option again.</p>


<p>Individual task scripts have some clear advantages over monolithic build systems:</p>


<ul>
  <li>Tasks are clearly enumerable and can be viewed like any other file-system folder.</li>
  <li>And like any system script, permissions can be restricted&#8212;per individual task.</li>
  <li>Individual tasks can be easily edited w/o sorting through large &#8220;Makefiles&#8221;.</li>
  <li>Shell-based tools and scripts written in other languages easily coexist.</li>
</ul>


<p>The only signifficant disadvantage to the script appraoch is the focus on <em>tasks</em>
rather than <em>builds</em>. In other words one can&#8217;t ask that a particular file be built
unless some task provides an interface for doing so.</p>


<p>But Ratch provides some</p>


<h2>Getting Started</h2>


<p>If you haven&#8217;t already done so, you&#8217;ll first need to install Ratch.
The process is straight-forward with RubyGems.</p>


<pre><code>
    $ gem install ratch
</code></pre>


<p>Alternatively you can install from source. Simply, download the package file,
decompress it, &#8216;cd&#8217; into the package directory and run <code>task/setup</code>.</p>


<pre><code>
    $ tar -xvzf ratch-1.0.0.gzip
    $ cd ratch-1.0.0
    $ sudo task/setup
</code></pre>


<p>Once installed, you can immediately start using Ratch. However, to make life even
easier, there is another tool that augments Ratch very nicely. So we recommend
hat you also install <a href="http://proutils.rubyforge.org">ProUtils</a>.
This is are optional but part of this tutorial will also cover its use with Ratch.</p>


<p><img src="img/toolbox.jpg" alt="" /></p>


<h1>Task Creation</h1>


<h2>Creating Your First Task</h2>


<p>Let jump right in by creating a Ratch script so you can see just how easy it is.
First create a faux project dirctory in which to conduct our tutorial. We&#8217;ll call it
<code>myproject/</code>.</p>


<pre><code>
    $ mkdir myproject
</code></pre>


<p>Now <code>cd</code> into it and create a directory to store your ratch scripts. The name of the directory
can be anything you like. Ratch doesn&#8217;t require that it have a special name. For the purposes
of this tutorial we will call it <code>task/</code>.</p>


<pre><code>
    $ cd myproject
    $ mkdir task
</code></pre>


<p>Now lets create a ratch script.</p>


<pre><code>
    $ vi task/list
</code></pre>


<p>This example uses <code>vi</code>. You can use your favorite editor, of course. Now, edit the file to read:</p>


<pre><code>
    # !/usr/bin/env ratch

    # List project files

    puts glob('/')
</code></pre>


<p>Save the file. If you are using a Unix-based operating system, also change the file&#8217;s
mode to be user executable<sup><a href="#fn2">2</a></sup>.</p>


<pre><code>
    $ chmod u+x task/list
</code></pre>


<p>Now run it like you might any executable file on your system:</p>


<pre><code>
    $ task/list
</code></pre>


<p id="fn2"><sup>2</sup> On Windows systems you do this a little differntly. Instead you need to run the task
via either of the <code>ruby</code> command. Ie. <code>ruby task/list</code>. You&#8217;ll need to keep
that in mind throughout this tutorial.</p>


<p>And, as you might have expected, our first task printed a listing of every file in our
project directory. Pretty simple. Yet there are a few things to notice about this example.</p>


<p>First, the <code>glob</code> command. <code>glob</code> is not a standard main method in Ruby. So this method
comes instead from the Ratch <span class="caps">DSL</span>. In normal Ruby you&#8217;d have to use <code>Dir.glob</code> to do the same
thing. Wile a minor difference, this is a simple example of how Ratch makes building project
tasks easier than just using normal Ruby scripts. There are many more methods provided by
Ratch&#8217;s <span class="caps">DSL</span>, and we will cover many of them later in this tutorial.</p>


<p>The other thing to notice is that we executed our script like we would any local command,
and we did so <em>from the project&#8217;s root directory</em>. This is very important. <i>The task will
act on the directory from which it is called</i>. This can be useful if a task provides
behavior effective relative to the call location, but it also means we must remain aware
this versitility, and use our task accordinginly. However, often a task is designed to be
run only from the project&#8217;s root directory, as we did in our example. In those cases it
is not uncommon for the task to perform <em>sanity</em> checks to make sure that&#8217;s indeed were a
task is being run. One thing you should not do though, but may at first be tempted to do,
is <code>cd</code> down into that task directory and run the tasks from there. Do not do that.
It won&#8217;t work!!!</p>


<h2>Task and System Calls</h2>


<p>Okay, that&#8217;s our first teeny tiny example. Now&#8217;s its time to dig a little deeper into the
Ratch <span class="caps">DSL</span>.</p>


<p>One of more unique aspects of Ratch scripts is the way in polymophizes internal method calls,
external task calls and external command calls. To demonstrate lets define a second task
called &#8216;list2&#8217;.</p>


<pre><code>
    $ vi task/list2
</code></pre>


<p>Make it read:</p>

<pre><code>
    # !/usr/bin/env ratch

    # List project files

    puts "How many lists?"
    list
    list
    list
</code></pre>


<p>Be sure to change the mode to user executable, then run it.</p>


<pre><code>
    $ task/list2
</code></pre>


<p>You will notice that calling <code>list2</code>, in turn, calls our first script, <code>list</code>. But it didn&#8217;t generate
a list three times, as you may have expected, but only once. That&#8217;s because tasks, by definition, are
only supposed to run once in a given run session. Internally, task results are cached to facilitate this.</p>


<p>Now lets try another example. First, rename <code>last2</code> to <code>rdoc</code></p>


<pre><code>
    $ mv task/list2 task/rdoc
</code></pre>


<p>Then edit it to read:</p>


<pre><code>
    # !/usr/bin/env ratch

    # Generate RDocs

    rdoc "README", 'm' =&gt; true, 'op' =&gt; 'doc'
</code></pre>


<p>For this example to work we&#8217;ll need to create a <code>README</code> file in project&#8217;s root directory.
Anything content will do:</p>


<pre><code>
    $ echo "= Welcome" &gt; README
</code></pre>

<p>Now, rather than run the task outright, let&#8217;s see what it would do without actually running the task.
Ratch provieds a&#8212;dryrun global flag that allows you to check/debug scripts easily.</p>


<pre><code>
    $ task/rdoc --dryrun
    rdoc -m --op doc lib
</code></pre>


<p>Ratch prints out the command that would have been run without the&#8212;dryrun flag. Notice how
Ratch interpreted the Ruby-esque method call as a commandline tool. It knew this b/c
1) there were no methods defined with then name &#8216;rdoc&#8217;, 2) there were not other local tasks
with the name rdoc (the task&#8217;s own filename does not count), and 3) it looked up the
systems list of executable files and found &#8216;rdoc&#8217; listed. It then interprets the arguments
accordingly, the main trick being that any trailing keyword arguments will be truned into
flag options of the command. However sometimes an external command will have an argument
usage that Ratch can&#8217;t handle. In thos cases simple trail along argument text. For instance
the above #rdoc call could have been written in any number of ways:</p>


<pre><code>
  rdoc "-m --op doc "README"
  rdoc "-m --op doc", "README"
  rdoc "<del>m", "</del>-op doc", "README"
</code></pre>


<p>Occasionally, there may be a name conflict bwetween a method and an external task
or command you wish to use. In those cases you can invoke the task or command using
either the <code>target</code> or <code>system</code> reference object, respectively. For instance the above
could have also been written:</p>


<pre><code>
  system.rdoc "README", 'm' =&gt; true, 'op' =&gt; 'doc'
</code></pre>


<p>The two forms are completely equivalent. The former is simply using <code>system</code>
behined the scenes.</p>


<h2>Integrated Build Tools</h2>


<p>Well Ratch wouldn&#8217;t be much a build tool if it didn&#8217;t facilitate the defintion
of file creation tasks, beyond simply running shell commands on demand. Ratch
provides a <span class="caps">DSL</span> method, <code>file</code>, just for this purpose. With it we can rewrite</p>


<pre><code>
  # !/usr/bin/env ratch

  # Generate RDocs

  file 'doc' =&gt; ['README'] do
    rdoc "README", 'm' =&gt; true, 'op' =&gt; 'doc'
  end

  target 'doc'
</code></pre>


<p>If you are familiar with Rake or Rant what this does is clear. It says that the
construction of a target file, in this case a directory called &#8216;doc&#8217;, depends on
a file &#8216;README&#8217;. What this does in practice is compare the modification times
of the target and it&#8217;s dependsencies. If <em>any</em> of the dependencies
have a modification time <em>after</em> the target file&#8217;s, then the target clearly
needs to be regenerated and so the task will execute. But if <em>none</em> of the
the dependecies have a last modification time <em>after</em> the targets, the the
target is considered upto date, and will not be rebuilt.</p>


<p>Note the last line <code>target :doc</code>, which invokes an <em>internal target</em>,
as opposed to external target which is another task script.</p>


<h2>Task Configuration</h2>


<p>Often a task proves useful enough to be reused in other projects, but to do this requires
some level of generalization and configurability. Ratch makes this easy to do via the
#config_load method. With it you can load a set of configuration options tied to a specific
name. The information can then be an entry in a central <code>config.yaml</code> file in your task
directory, or it can be in a file by that name, ie. <code>_name_.yaml</code>.</p>


<p>For example, a <code>config.yaml</code> file might look something like:</p>


<pre><code>
  rdoc:
    dir      : 'doc/rdoc'
    main     : README

  publish:
    target   : rubyforge
    type     : web
    host     : rubyforge.org
    username : transami
    dir      : web

  release:
    host     : rubyforge.org
    username : transami
    project  : reap
    groupid  : 811
    package  : ratch
    dir      : pkg
</code></pre>


<p>In a script one can access this information easily. With it we can define our rdoc task
like so:</p>


<pre><code>
  #!/usr/bin/env ratch

  # Generate RDocs

  config = load_config('rdoc')

  output  = config['dir']
  include = config['include'] || ['README']

  file ouput =&gt; include do
    rdoc include, 'm' =&gt; true, 'op' =&gt; output
  end
</code></pre>


<pre><code>
    target 'doc'
</code></pre>


<p>Now our rdoc task is perfectly general (albiet a bit simplistic), we can reuse the same
task in any project. We only need to change the config.yaml settings per project instead
of having to make isolated changes to the task itself. In turn this makes it possible to
readily share task with other project developers.</p>


<h2>Project Info via Box</h2>


<p><img src="images/box.jpg" style="float: left; width: 100px;;" alt="" /></p>


<p>Notice the reference to &#8216;info&#8217;. This is an OpenStruct-like interface to the project information.</p>


<p>It&#8217;s a good idea to take some time and learn all the standard properties of a project&#8217;s information file
which you can draw on for your own tools. Looking at the RDoc <span class="caps">API</span> documentation will elucidate most of them.
And, of course you can also invent your own if needed.</p>


<p>As you can see this creates a <i>project information file</i> called <code>ProjectInfo</code>.
Another, and perhaps better way to create a ProjectInfo file is to copy one from some
other project and modify it to suit your needs. That makes it easier to learn how to fill
them out. But if you don&#8217;t have that option or you are already familiar with the layout,
then you can use <code>mint</code> to copy a new template.</p>


<p>The name of the project information file has some flexibility. Capitalization, for
instance, is insignifficant; <code>projectinfo</code> would do just as well. Also
a few alternative namings are supported, namely, <code>project.yaml</code> or just
<code>PROJECT</code> (again capitalization doesn&#8217;t matter). For simplicity sake we will refer
to this file as the ProjectInfo file throughout the documentation. Just remember that you
can substitue any of these other supported names in it&#8217;s place to suit your personal preference.
If you prefer one of the alternate names when creating the file, you can specify it as
a parameter of the <code>--info</code> option.</p>


<pre><code>
    $ project new&#8212;info project.yaml
</code></pre>


<p>Rather then &#8216;ProjectInfo&#8217;, the file will be called &#8216;project.yaml&#8217;. Ratchets will let you know
if you pick a name it does not recognize.</p>


<p>Once you have edited the ProjectInfo file (more on this in the next section), subsequnelty running
<code>project new</code> will create the same project layout as before, but it will add
enhanced details to further ease the creation of the new project. For instance, the lib
directory will already have subdirectory named appropriately and if you use the&#8212;web option,
the index.html page will be suitably labeled. And so on.</p>


<div class="special"><b><span class="caps">NOTE</span></b> The enhanced information scaffolding is barely
implemented as of yet. But will continue to improve with future releases.</div>


<p>Of course, if you already have a project with which you wish to use Ratchets, rather than
create a whole new project layout you will probably just want to add the <code>&lt;i&gt;ProjectInfo&lt;/i&gt;</code>
file to it. In that case you simply run <code>project new --info</code>. The project information file
will be added and the rest of your project will be undisturbed. Running <code>project new</code> on
a pre-existing project will have no effect. It will simply report an error that your project
already has content.</p>


<p>The project file is of central importance to Ratchets and the <code>project</code> command.
The file is a <span class="caps">YAML</span>-formatted file storing shared information from which Ratchets&#8217; tools gather
default information on how to perform their actions. Most subsequent activity will largely
depend on the content of this file. So lets now turn our attention squarely to it.</p>


<p>The structure of the ProjectInfo file is fairly self-explanitory. The header is devoted to
common information. This is generally followed by deafult tool settings. And lastly
a <i>tasks</i> section is used to define user tasks. Each task entry is a <span class="caps">YAML</span> map where the
key represent the task name followed by a private type (!!) which identifies the tool
it invokes. The next line begins the indented attributes the tool needs to do the job.
To a detailed list of parameters each tool accepts have a look at the  RDoc <span class="caps">API</span>.</p>

<p>Example Project File</p>

<pre><code>
  title    : Reap
  version  : 6.0.0
  status   : 'beta'

  author   : Thomas Sawyer
  created  : '2004-04-01'
  email    : transfirz@zmail.com
  homepage : "http://reap.rubyforge.org"

  summary  : A Ruby Project Management Assistant

  description: &gt;
    Reap comprises a set of tasks commonly needed by
    Ruby package developers/deployers, such as testing,
    packaging, releasing, etc. You can also use Reap
    to create your own custom tasks. Reap utilizes a
    YAML configuration file to harvest common project
    information, significantly simplifying these chores.

  rubyforge:
    project  : reap
    username : transami

  revision:
    tool: darcs
    exclude:
      - doc/api

  executables : [ reap, rubytest ]

  dependencies:
    - [ facets, '&gt; 1.5' ]

  exclude:
    - snip
    - doc/api
</code></pre>


<p>As you can the top portion is fairly self-explainitory. After that we see entries related to
specific Ratchet tools like package. This entry specifies default parameters to use for any
subsequent call of the package tool. We will cover this in more detail in the
<a href="tool.html">Tool Utilization</a> documention.</p>


<p>Following this is the tasks section with which we can define our own user-defined
tasks. Typically these are specializtions of the buil-in tools,
but as you can see by our &#8220;silly example&#8221; arbitary tasks can be written as well. We will
cover this in more detail in the <a href="task.html">Task Management</a> documentation.</p>


<h2>Verifying Project Information</h2>


<p>When Ratchets searches for a ProjectInfo file it will move up the
directory hierarchy from the current working directory until it finds a ProjectInfo file
and will assume the location of that file is your project&#8217;s source directory unless the file
itself specifes that another directory is the source root.</p>


<p>Project has one other subcommand that can be used to verify the project information: <code>info</code>.
This simply dumps the parsed  contents of the ProjectInfo file to stdout.</p>


<pre><code>
    $ box --dump
</code></pre>


<p>This may seem trivial, but it can be sometimes be useful to quicky insure information
is correct and that you are calling <code>project</code> from an appropriate location. [ed-
the order of information is arbitrary, so it looks a bit messy. This will be improved
in a future release.]</p>


<h2>On Your Own</h2>


<p>The rest of building a task is just a matter of writing the code to have
it do what you want. If you develop any nice tasks, be sure to pass them along!</p>


<p><img src="images/clipboard.jpg" alt="" /></p>


<h1>Task Management</h1>


<h2>Listings Tasks</h2>


<p>Of course, it&#8217;s not enough to just create tasks and run them willy-nilly. A good build tool
will let us see what tasks we have available and what they do. It&#8217;s eay enough to use <code>ls</code>
or <code>dir</code> to list the targets in the task directory.</p>


<pre><code>
    $ ls task/
    list
</code></pre>


<p>But that only tells us the names of avaialble tasks. What about what the tasks do? Ratch
comes with a command line tool to faciltiate this called <code>lt</code>. It works much like <code>ls</code>.
Try it:</p>


<pre><code>
    $ lt task/
    [/home/me/projects/foo]
    task/list     # List project files
</code></pre>


<p>So now we know waht the task does as well. Didi you notice where lt got that information?
It&#8217;s form the first comment line of the ratch script. <code>lt</code> is enven a bit smater than
this. If you give it an actual script, it will output full help-details, if the script
provides it. In our case, the <code>list</code> task doesn&#8217;t have further details (it doesn&#8217;t
really need them), but ew can add some for sample sake.</p>


<p>Edit the <code>list</code> file to look like:</p>


<pre><code>
  #!/usr/bin/env ratch

  # List project files
  # This task simply prints out a list
  # of all the files in the project.

  puts glob('/')
</code></pre>


<p>Now try:</p>


<pre><code>
    $ lt task/list

    # List project files

    # This task simply prints out a list
    # of all the files in the project.
</code></pre>


<p>As you can see, in the mode, <code>lt</code> outputs all the comments line at the top of script.
It stops at the first non-blank, non-commnet line.</p>


<h2>Lookup and Do</h2>


What if I want to run a task script, but I&#8217;m currently way down in the
project&#8217;s directory tree. I dont want to <code>cd</code> all the way up or type
<code>../</code> a bunch of times.

<p>Sake provides a utility called <code>ludo</code> which stands for
<i>lookup and do</i>. Just prepend that command to your invocation and it
will find the executable and execute it.</p>


<pre><code>
    $ ludo task/list
</code></pre>


<p>By the way, the <code>ludo</code> command can be used anywhere you like, it is
not dependent on Sake to work. Albeit you should exercise some caution when doing
so since <code>ludo</code> actively searches up the directory tree for a script
to execute.</p>


<p>Sometimes, you may want to lookup and run a command but rather than change directories to
the where the command match was made you want the task will be run from the current
directory. You can do that with the&#8212;here switch (or -h for short).</p>


<pre><code>
    $ ludo -h task/list
</code></pre>


<p>This will list all the files relative to the current directory.</p>


<p><img src="images/mints.png" alt="" /></p>


<h2>Task Trading via Mint</h2>


<p>Mint is another ProUtil, like Ratch, taht is extermely useful for distributing and resusing Ratch tasks.
In fact Racth comes with a dozen or so general purpose tasks that you can install to you&#8217;re projects
right aay using <code>mint</code>.</p>


<pre><code>
    $ mint -s ratch/setup
</code></pre>


<p><img src="images/appendix.png" alt="" /></p>


<h1>Appendix</h1>


<h2>License</h2>


<p>Ratchets, Ratch<br/>
Copyright&#169; 2006,2007 Thomas Sawyer<br/></p>


<p>Ruby/GPL License</p>


<p>This program is free software; you can redistribute it and/or modify
it under the terms of the Ruby License or <span class="caps">GNU</span> General Public License
as published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.</p>


<p>This program is distributed in the hope that it will be useful,
but <span class="caps">WITHOUT ANY WARRANTY</span>; without even the implied warranty of
<span class="caps">MERCHANTABILITY</span> or <span class="caps">FITNESS FOR A PARTICULAR PURPOSE</span>.  See the
<span class="caps">GNU</span> General Public License for more details.</p>


<p>You should have received a copy of the <span class="caps">GNU</span> General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, <span class="caps">MA  02111</span>-1307 <span class="caps">USA</span></p>

</content>
